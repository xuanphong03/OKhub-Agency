/* eslint-disable @typescript-eslint/no-explicit-any */
import crypto from 'crypto-browserify'

const SECRET_KEY = 'Pl4og/set0wVSa9bnC+jICEA7V/0N31t' // Thay b·∫±ng key b√≠ m·∫≠t c·ªßa b·∫°n (ph·∫£i ƒë·ªß 32 bytes)
const IV_LENGTH = 16 // ƒê·ªô d√†i IV (Initialization Vector)

// üõ†Ô∏è H√†m m√£ h√≥a (Encrypt)
export const encryptData = (key: string, data: any) => {
  try {
    const iv = crypto.randomBytes(IV_LENGTH) // T·∫°o IV ng·∫´u nhi√™n
    const cipher = crypto.createCipheriv(
      'aes-256-cbc',
      Buffer.from(SECRET_KEY, 'utf-8'),
      iv
    )

    let encrypted = cipher.update(JSON.stringify(data), 'utf-8', 'base64')
    encrypted += cipher.final('base64')

    // L∆∞u IV c√πng v·ªõi d·ªØ li·ªáu ƒë√£ m√£ h√≥a
    const result = iv.toString('base64') + ':' + encrypted
    localStorage.setItem(key, result)
  } catch (error) {
    console.error('Encryption failed:', error)
  }
}

// üîì H√†m gi·∫£i m√£ (Decrypt)
export const decryptData = (key: string) => {
  try {
    const storedData = localStorage.getItem(key)
    if (!storedData) return null // Kh√¥ng c√≥ d·ªØ li·ªáu

    // T√°ch IV v√† d·ªØ li·ªáu ƒë√£ m√£ h√≥a
    const [ivBase64, encryptedData] = storedData.split(':')
    const iv = Buffer.from(ivBase64, 'base64')

    const decipher = crypto.createDecipheriv(
      'aes-256-cbc',
      Buffer.from(SECRET_KEY, 'utf-8'),
      iv
    )

    let decrypted = decipher.update(encryptedData, 'base64', 'utf-8')
    decrypted += decipher.final('utf-8')

    return JSON.parse(decrypted)
  } catch (error) {
    console.error('Decryption failed:', error)
    return null
  }
}
